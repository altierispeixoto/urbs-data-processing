bairros: >
  LOAD CSV WITH HEADERS FROM "file:///neighborhoods/bairros.csv" AS row
  MERGE (n:Neighborhood {code: row.code, name: row.name, section_code: row.section_code, section_name: row.section_name, h3_index10: row.h3_index10 });

color: >
  LOAD CSV WITH HEADERS FROM 'file:///color/{datareferencia}/color.csv' AS row
  MERGE (c:Color {value: row.color});

service_category: >
  LOAD CSV WITH HEADERS FROM 'file:///service_category/{datareferencia}/service_category.csv' AS row
  MERGE (s:ServiceCategory {value: row.service_category});

lines: >
  LOAD CSV WITH HEADERS FROM 'file:///lines/{datareferencia}/lines.csv' AS row
  CALL {
    WITH row
    MATCH (y:Year {value: toInteger(row.year)})-[:CONTAINS]->(m:Month {value: toInteger(row.month)})-[:CONTAINS]->(d:Day {value: toInteger(row.day)})
    MATCH (c:Color {value: row.color})
    MATCH (s:ServiceCategory {value: row.service_category})
    MERGE (l:Line {line_code: row.line_code, line_name: row.line_name, card_only: row.card_only})
    MERGE (d)-[:HAS_LINE]->(l)
    MERGE (l)-[:HAS_COLOR]->(c)
    MERGE (l)-[:HAS_SERVICE_CATEGORY]-(s)
  } IN TRANSACTIONS OF 20000 ROWS;

bus_stop_type: >
  LOAD CSV WITH HEADERS FROM 'file:///bus_stop_type/{datareferencia}/bus_stop_type.csv' AS row
  MERGE (t:BusStopType {value: row.type});

bus_stops: >
  LOAD CSV WITH HEADERS FROM 'file:///bus_stops/{datareferencia}/bus_stops.csv' AS row
  CALL {
    WITH row
    MATCH (y:Year {value: toInteger(row.year)})-[:CONTAINS]->(m:Month {value: toInteger(row.month)})-[:CONTAINS]->(d:Day {value: toInteger(row.day)})-[:HAS_LINE]->(l:Line {line_code: row.line_code})
    MATCH (bst:BusStopType {value: row.type})
    MERGE (bs:BusStop {number: row.number, name: row.name, latitude: row.latitude, longitude: row.longitude, neighborhood_code: row.code, h3_index10: row.h3_index10})
    MERGE (l)-[:HAS_TRIP]->(t:Trip {line_way: row.line_way})
    MERGE (t)-[:HAS_BUS_STOP]->(bs)
    MERGE (bs)-[:HAS_TYPE]->(bst)
  } IN TRANSACTIONS OF 10000 ROWS;

trip_endpoints: >
  LOAD CSV WITH HEADERS FROM 'file:///trip_endpoints/{datareferencia}/trip_endpoints.csv' AS row
  CALL {
    WITH row
    MATCH (y:Year {value: toInteger(row.year)})-[:CONTAINS]->(m:Month {value: toInteger(row.month)})-[:CONTAINS]->(d:Day {value: toInteger(row.day)})-[:HAS_LINE]->(l:Line {line_code: row.line_code})-[:HAS_TRIP]->(t:Trip {line_way: row.line_way})
    MATCH (t)-[:HAS_BUS_STOP]->(bss:BusStop {number: row.start_point})
    MATCH (t)-[:HAS_BUS_STOP]->(bse:BusStop {number: row.end_point})
    MERGE (t)-[:STARTS_ON_POINT]->(bss)
    MERGE (t)-[:ENDS_ON_POINT]->(bse)
  } IN TRANSACTIONS OF 20000 ROWS;

line_routes: >
  LOAD CSV WITH HEADERS FROM 'file:///line_routes/{datareferencia}/line_routes.csv' AS row
  CALL {
    WITH row
    MATCH (y:Year {value: toInteger(row.year)})-[:CONTAINS]->(m:Month {value: toInteger(row.month)})-[:CONTAINS]->(d:Day {value: toInteger(row.day)})-[:HAS_LINE]->(l:Line {line_code: row.line_code})-[:HAS_TRIP]->(t:Trip {line_way: row.line_way})
    MATCH (t)-[:HAS_BUS_STOP]->(bss:BusStop {number: row.start_point})
    MATCH (t)-[:HAS_BUS_STOP]->(bse:BusStop {number: row.end_point})
    MERGE (bss)-[r:NEXT_STOP {line_code: row.line_code, line_way: row.line_way}]->(bse)
    ON CREATE SET
      r.distance = point.distance(
        point({longitude: toFloat(bss.longitude), latitude: toFloat(bss.latitude), crs: 'wgs-84'}),
        point({longitude: toFloat(bse.longitude), latitude: toFloat(bse.latitude), crs: 'wgs-84'})
      )
  } IN TRANSACTIONS OF 20000 ROWS;

events: >
  LOAD CSV WITH HEADERS FROM 'file:///events/{datareferencia}/events.csv' AS row
  CALL {
    WITH row
    CREATE (ev:Event {
      vehicle: row.vehicle, 
      moving_status: row.moving_status, 
      event_timestamp: row.event_timestamp,
      latitude: row.latitude, 
      longitude: row.longitude, 
      avg_velocity: row.avg_velocity
    })
  } IN TRANSACTIONS OF 30000 ROWS;

events2: >
  LOAD CSV WITH HEADERS FROM 'file:///events/{datareferencia}/events.csv' AS row
  CALL {
    WITH row
    MATCH (y:Year {value: toInteger(row.year)})-[:CONTAINS]->(m:Month {value: toInteger(row.month)})-[:CONTAINS]->(d:Day {value: toInteger(row.day)})-[:HAS_LINE]->(l:Line {line_code: row.line_code})-[:HAS_TRIP]->(t:Trip {line_way: row.line_way})
    MATCH (ev:Event {vehicle: row.vehicle, event_timestamp: row.event_timestamp})
    MERGE (t)-[:HAS_EVENT]->(ev)
  } IN TRANSACTIONS OF 30000 ROWS;

events3: >
  LOAD CSV WITH HEADERS FROM 'file:///events/{datareferencia}/events.csv' AS row
  CALL {
    WITH row
    MATCH (y:Year {value: toInteger(row.year)})-[:CONTAINS]->(m:Month {value: toInteger(row.month)})-[:CONTAINS]->(d:Day {value: toInteger(row.day)})-[:CONTAINS]->(h:Hour {value: toInteger(row.hour)})
    MATCH (ev:Event {vehicle: row.vehicle, event_timestamp: row.event_timestamp})
    MERGE (h)-[:HAS_EVENT]->(ev)
  } IN TRANSACTIONS OF 30000 ROWS;

events4: >
  LOAD CSV WITH HEADERS FROM 'file:///events/{datareferencia}/events.csv' AS lines
  CALL {
    WITH lines
    WITH lines as row
    WHERE toInteger(row.delta_time_in_sec) > 0 AND toFloat(row.delta_time_in_sec) <= 1200
    MATCH (evi:Event {vehicle: row.vehicle, event_timestamp: row.last_timestamp})
    MATCH (evf:Event {vehicle: row.vehicle, event_timestamp: row.event_timestamp})
    CREATE (evi)-[:MOVED_TO {delta_time_in_sec: row.delta_time_in_sec}]->(evf)
  } IN TRANSACTIONS OF 30000 ROWS;

trips: >
  LOAD CSV WITH HEADERS FROM 'file:///trips/{datareferencia}/trips.csv' AS row
  CALL {
    WITH row
    CREATE (t:Timetable {
      start_point: row.start_point, 
      end_point: row.end_point, 
      start_time: row.start_time,
      timetable: row.timetable, 
      end_time: row.end_time, 
      line_way: row.line_way
    })
    WITH row
    MATCH (y:Year {value: toInteger(row.year)})-[:CONTAINS]->(m:Month {value: toInteger(row.month)})-[:CONTAINS]->(d:Day {value: toInteger(row.day)})-[:HAS_LINE]->(l:Line {line_code: row.line_code})
    MERGE (l)-[:HAS_TIMETABLE]->(t)
  } IN TRANSACTIONS OF 20000 ROWS;

bus_event_edges: >
  LOAD CSV WITH HEADERS FROM 'file:///bus_event_edges/{datareferencia}/bus_event_edges.csv' AS row
  CALL {
    WITH row
    MATCH (evi:Event {vehicle: row.vehicle, event_timestamp: row.event_timestamp})
    MATCH (y:Year {value: toInteger(row.year)})-[:CONTAINS]->(m:Month {value: toInteger(row.month)})-[:CONTAINS]->(d:Day {value: toInteger(row.day)})-[:HAS_LINE]->(l:Line {line_code: row.line_code})-[:HAS_TRIP]->(t:Trip {line_way: row.line_way})-[:HAS_BUS_STOP]->(bs:BusStop {number: row.number})
    MERGE (evi)-[:IS_NEAR_BY]->(bs)
  } IN TRANSACTIONS OF 20000 ROWS;
